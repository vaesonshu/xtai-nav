# ===============================
# 1. Base stage
# ===============================
FROM node:18-alpine AS base

WORKDIR /app
RUN apk add --no-cache libc6-compat


# ===============================
# 2. Dependencies stage
# ===============================
FROM base AS deps

# 复制 lock 文件（优先顺序：yarn > npm > pnpm）
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# 安装依赖（自动识别包管理器）
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "❌ No lockfile found. Please use yarn/npm/pnpm."; exit 1; fi


# ===============================
# 3. Builder stage
# ===============================
FROM base AS builder

WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 生成 Prisma Client
RUN npx prisma generate

# 构建 Next.js 应用
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "❌ No lockfile found."; exit 1; fi


# ===============================
# 4. Runner stage
# ===============================
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# 创建运行用户
RUN addgroup --system --gid 1001 nodejs \
  && adduser --system --uid 1001 nextjs

# 拷贝静态资源与构建产物
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs
EXPOSE 3000

CMD ["node", "server.js"]
