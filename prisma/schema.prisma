generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 网站表
model Website {
  id          String         @id @default(cuid()) // 唯一 ID
  name        String         // 网站名称
  url         String         @unique // 网站链接，确保唯一
  iconUrl     String        // 网站图标 URL
  description String        // 网站描述
  categories  WebsiteCategory[] // 通过中间表关联多个分类
  tags        String[]       // 网站标签，数组格式
  likes       Int            @default(0) // 点赞数，默认 0
  views       Int            @default(0) // 访问统计，默认 0
  createdAt   DateTime       @default(now()) // 创建时间
  updatedAt   DateTime       @updatedAt // 更新时间
  @@index([tags]) // 添加 GIN 索引以加速标签搜索
}

// 分类表
model Category {
  id        String            @id @default(cuid()) // 唯一 ID
  name      String            @unique // 分类名称，如 "AI 编程"
  slug      String            @unique // 友好的 URL 标识，如 "ai-programming"
  websites  WebsiteCategory[] // 通过中间表关联多个网站
  createdAt DateTime          @default(now()) // 创建时间
  updatedAt DateTime          @updatedAt // 更新时间
}

// 中间表，用于关联网站和分类
model WebsiteCategory {
  websiteId    String
  categoryId   String
  website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([websiteId, categoryId]) // 组合主键，确保唯一
}

// 网站统计
model Visit {
  id        String   @id @default(cuid())
  createdAt String   
  ip        String
  userAgent String?
  path      String   @default("/")
}

model UniqueVisitor {
  id         String   @id @default(cuid())
  ip         String   @unique
  firstVisit String   
  lastVisit  String 
  visitCount Int      @default(1)
}

model VisitStats {
  id          String   @id @default("singleton")
  count       Int      @default(0)
  uniqueCount Int      @default(0)
  updatedAt   String 
}

// 弹幕留言
model Message {
  id        String   @id @default(cuid())
  content   String
  author    String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserCount {
  id    String @id @default("singleton")
  count Int    @default(0)
}